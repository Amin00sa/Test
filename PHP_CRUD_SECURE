<?php
// Empêcher l'accès direct au fichier
if (!defined('SECURE_ACCESS')) {
    die('Accès direct interdit');
}

// Configuration de la base de données
define('DB_HOST', 'localhost');
define('DB_USER', 'username_secure'); // Utilisez un utilisateur avec droits limités
define('DB_PASS', 'ComplexeP@ssw0rd!2023'); // Mot de passe fort
define('DB_NAME', 'app_database');
define('DB_CHARSET', 'utf8mb4');

// Désactiver les rapports d'erreurs en production
error_reporting(0);
ini_set('display_errors', 0);

// Fonction de connexion sécurisée
function getDBConnection() {
    static $conn = null;
    
    if ($conn === null) {
        $conn = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
        
        if ($conn->connect_error) {
            error_log("Échec de connexion DB: " . $conn->connect_error);
            die("Erreur de connexion à la base de données");
        }
        
        // Définir le charset pour éviter les injections
        if (!$conn->set_charset(DB_CHARSET)) {
            error_log("Erreur charset DB: " . $conn->error);
            die("Erreur de configuration de la base de données");
        }
    }
    
    return $conn;
}
?>

<?php
// Vérification de l'accès sécurisé
if (!defined('SECURE_ACCESS')) {
    die('Accès direct interdit');
}

require_once 'config.php';

class SecureCRUDController {
    private $tableName;
    private $conn;
    private $allowedColumns;
    
    public function __construct($tableName, $allowedColumns = []) {
        $this->tableName = $this->sanitizeInput($tableName);
        $this->allowedColumns = $allowedColumns;
        $this->conn = getDBConnection();
    }
    
    // Méthode de nettoyage des entrées
    private function sanitizeInput($input) {
        if (is_array($input)) {
            return array_map([$this, 'sanitizeInput'], $input);
        }
        return htmlspecialchars(strip_tags(trim($input)), ENT_QUOTES, 'UTF-8');
    }
    
    // Validation des colonnes autorisées
    private function validateColumns($data) {
        if (empty($this->allowedColumns)) return $data;
        
        $filtered = [];
        foreach ($data as $key => $value) {
            if (in_array($key, $this->allowedColumns)) {
                $filtered[$key] = $value;
            }
        }
        return $filtered;
    }
    
    // CREATE avec requêtes préparées
    public function create($data) {
        $data = $this->validateColumns($this->sanitizeInput($data));
        if (empty($data)) throw new Exception("Aucune donnée valide fournie");
        
        $columns = implode(", ", array_keys($data));
        $placeholders = implode(", ", array_fill(0, count($data), "?"));
        
        $sql = "INSERT INTO {$this->tableName} ($columns) VALUES ($placeholders)";
        $stmt = $this->conn->prepare($sql);
        
        if (!$stmt) throw new Exception("Erreur de préparation: " . $this->conn->error);
        
        $types = str_repeat('s', count($data));
        $values = array_values($data);
        $stmt->bind_param($types, ...$values);
        
        if ($stmt->execute()) {
            return $this->conn->insert_id;
        } else {
            error_log("Erreur CREATE: " . $stmt->error);
            throw new Exception("Erreur lors de la création");
        }
    }
    
    // READ avec protection contre les injections
    public function read($id) {
        $id = (int)$this->sanitizeInput($id);
        $sql = "SELECT * FROM {$this->tableName} WHERE id = ? LIMIT 1";
        $stmt = $this->conn->prepare($sql);
        
        if (!$stmt) throw new Exception("Erreur de préparation: " . $this->conn->error);
        
        $stmt->bind_param('i', $id);
        $stmt->execute();
        $result = $stmt->get_result();
        
        return $result->fetch_assoc();
    }
    
    // READ ALL avec limites pour éviter les surcharges
    public function readAll($limit = 100, $offset = 0) {
        $limit = min((int)$this->sanitizeInput($limit), 1000); // Limite maximale
        $offset = max((int)$this->sanitizeInput($offset), 0);
        
        $sql = "SELECT * FROM {$this->tableName} LIMIT ? OFFSET ?";
        $stmt = $this->conn->prepare($sql);
        
        if (!$stmt) throw new Exception("Erreur de préparation: " . $this->conn->error);
        
        $stmt->bind_param('ii', $limit, $offset);
        $stmt->execute();
        $result = $stmt->get_result();
        
        $rows = [];
        while ($row = $result->fetch_assoc()) {
            $rows[] = $row;
        }
        return $rows;
    }
    
    // UPDATE sécurisé
    public function update($id, $data) {
        $id = (int)$this->sanitizeInput($id);
        $data = $this->validateColumns($this->sanitizeInput($data));
        if (empty($data)) throw new Exception("Aucune donnée valide fournie");
        
        $updates = [];
        foreach (array_keys($data) as $column) {
            $updates[] = "$column = ?";
        }
        $updatesStr = implode(", ", $updates);
        
        $sql = "UPDATE {$this->tableName} SET $updatesStr WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        
        if (!$stmt) throw new Exception("Erreur de préparation: " . $this->conn->error);
        
        $types = str_repeat('s', count($data)) . 'i';
        $values = array_values($data);
        $values[] = $id;
        $stmt->bind_param($types, ...$values);
        
        if ($stmt->execute()) {
            return $stmt->affected_rows;
        } else {
            error_log("Erreur UPDATE: " . $stmt->error);
            throw new Exception("Erreur lors de la mise à jour");
        }
    }
    
    // DELETE avec vérification d'existence
    public function delete($id) {
        $id = (int)$this->sanitizeInput($id);
        
        // Vérifier d'abord l'existence
        $existing = $this->read($id);
        if (!$existing) throw new Exception("Enregistrement non trouvé");
        
        $sql = "DELETE FROM {$this->tableName} WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        
        if (!$stmt) throw new Exception("Erreur de préparation: " . $this->conn->error);
        
        $stmt->bind_param('i', $id);
        
        if ($stmt->execute()) {
            return $stmt->affected_rows;
        } else {
            error_log("Erreur DELETE: " . $stmt->error);
            throw new Exception("Erreur lors de la suppression");
        }
    }
    
    // Fermeture sécurisée
    public function __destruct() {
        if ($this->conn) {
            $this->conn->close();
        }
    }
}
?>

<?php
define('SECURE_ACCESS', true);
require_once 'controller.php';

// Headers de sécurité
header("X-Frame-Options: DENY");
header("X-Content-Type-Options: nosniff");
header("X-XSS-Protection: 1; mode=block");
header("Content-Security-Policy: default-src 'self'");

// Démarrer la session sécurisée
ini_set('session.cookie_httponly', 1);
ini_set('session.cookie_secure', 1); // En production avec HTTPS
ini_set('session.use_strict_mode', 1);
session_start();

// Vérification CSRF (exemple basique)
if (!isset($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

// Exemple d'utilisation sécurisée
try {
    // Seulement les colonnes autorisées
    $userController = new SecureCRUDController('users', ['name', 'email', 'age']);
    
    // Exemple de création avec vérification CSRF
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['csrf_token']) 
        && hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])) {
        
        $newId = $userController->create([
            'name' => $_POST['name'] ?? '',
            'email' => $_POST['email'] ?? '',
            'age' => $_POST['age'] ?? 0
        ]);
        
        echo "Nouvel ID: " . htmlspecialchars($newId);
    }
    
    // Lister les utilisateurs (avec pagination)
    $users = $userController->readAll(10, 0);
    foreach ($users as $user) {
        echo htmlspecialchars($user['name']) . "<br>";
    }
    
} catch (Exception $e) {
    error_log("Erreur application: " . $e->getMessage());
    http_response_code(500);
    echo "Une erreur est survenue. Veuillez réessayer plus tard.";
}
?>
