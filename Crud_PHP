<?php
// Database configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASS', 'password');
define('DB_NAME', 'database_name');

// Create connection
function getDBConnection() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
    
    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    return $conn;
}
?>

<?php
require_once 'config.php';

class CRUDController {
    private $tableName;
    private $conn;
    
    public function __construct($tableName) {
        $this->tableName = $tableName;
        $this->conn = getDBConnection();
    }
    
    // Create a new record
    public function create($data) {
        $columns = implode(", ", array_keys($data));
        $values = "'" . implode("', '", array_values($data)) . "'";
        
        $sql = "INSERT INTO {$this->tableName} ($columns) VALUES ($values)";
        
        if ($this->conn->query($sql) === TRUE) {
            return $this->conn->insert_id;
        } else {
            throw new Exception("Error: " . $sql . "<br>" . $this->conn->error);
        }
    }
    
    // Read all records
    public function readAll() {
        $sql = "SELECT * FROM {$this->tableName}";
        $result = $this->conn->query($sql);
        
        $rows = [];
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                $rows[] = $row;
            }
        }
        
        return $rows;
    }
    
    // Read single record by ID
    public function read($id) {
        $sql = "SELECT * FROM {$this->tableName} WHERE id = $id";
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            return $result->fetch_assoc();
        } else {
            return null;
        }
    }
    
    // Update record
    public function update($id, $data) {
        $updates = [];
        foreach ($data as $key => $value) {
            $updates[] = "$key = '$value'";
        }
        $updatesStr = implode(", ", $updates);
        
        $sql = "UPDATE {$this->tableName} SET $updatesStr WHERE id = $id";
        
        if ($this->conn->query($sql) === TRUE) {
            return $this->conn->affected_rows;
        } else {
            throw new Exception("Error: " . $sql . "<br>" . $this->conn->error);
        }
    }
    
    // Delete record
    public function delete($id) {
        $sql = "DELETE FROM {$this->tableName} WHERE id = $id";
        
        if ($this->conn->query($sql) {
            return $this->conn->affected_rows;
        } else {
            throw new Exception("Error: " . $sql . "<br>" . $this->conn->error);
        }
    }
    
    // Close connection
    public function __destruct() {
        $this->conn->close();
    }
}
?>


<?php
require_once 'controller.php';

// Example usage with a "users" table
$userController = new CRUDController('users');

try {
    // Create a new user
    $newUserId = $userController->create([
        'name' => 'John Doe',
        'email' => 'john@example.com',
        'age' => 30
    ]);
    echo "Created user with ID: $newUserId<br>";
    
    // Read all users
    $users = $userController->readAll();
    echo "<pre>All users: " . print_r($users, true) . "</pre>";
    
    // Read single user
    $user = $userController->read($newUserId);
    echo "<pre>Single user: " . print_r($user, true) . "</pre>";
    
    // Update user
    $updatedRows = $userController->update($newUserId, [
        'name' => 'John Updated',
        'age' => 31
    ]);
    echo "Updated $updatedRows user(s)<br>";
    
    // Delete user
    $deletedRows = $userController->delete($newUserId);
    echo "Deleted $deletedRows user(s)<br>";
    
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
}
?>

// Secure create method example
public function create($data) {
    $columns = implode(", ", array_keys($data));
    $placeholders = implode(", ", array_fill(0, count($data), '?'));
    
    $sql = "INSERT INTO {$this->tableName} ($columns) VALUES ($placeholders)";
    $stmt = $this->conn->prepare($sql);
    
    $types = str_repeat('s', count($data)); // assuming all strings for simplicity
    $stmt->bind_param($types, ...array_values($data));
    
    if ($stmt->execute()) {
        return $this->conn->insert_id;
    } else {
        throw new Exception("Error: " . $stmt->error);
    }
}
